// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class ItemUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ItemUpdate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ItemUpdate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ItemUpdate", id.toString(), this);
  }

  static load(id: string): ItemUpdate | null {
    return store.get("ItemUpdate", id) as ItemUpdate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerItemID(): BigInt {
    let value = this.get("offerItemID");
    return value.toBigInt();
  }

  set offerItemID(value: BigInt) {
    this.set("offerItemID", Value.fromBigInt(value));
  }
}

export class Kill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Kill entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Kill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Kill", id.toString(), this);
  }

  static load(id: string): Kill | null {
    return store.get("Kill", id) as Kill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerID(): BigInt {
    let value = this.get("offerID");
    return value.toBigInt();
  }

  set offerID(value: BigInt) {
    this.set("offerID", Value.fromBigInt(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get buyGem(): Bytes {
    let value = this.get("buyGem");
    return value.toBytes();
  }

  set buyGem(value: Bytes) {
    this.set("buyGem", Value.fromBytes(value));
  }

  get payAmt(): BigInt {
    let value = this.get("payAmt");
    return value.toBigInt();
  }

  set payAmt(value: BigInt) {
    this.set("payAmt", Value.fromBigInt(value));
  }

  get buyAmt(): BigInt {
    let value = this.get("buyAmt");
    return value.toBigInt();
  }

  set buyAmt(value: BigInt) {
    this.set("buyAmt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Make extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Make entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Make entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Make", id.toString(), this);
  }

  static load(id: string): Make | null {
    return store.get("Make", id) as Make | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerID(): BigInt {
    let value = this.get("offerID");
    return value.toBigInt();
  }

  set offerID(value: BigInt) {
    this.set("offerID", Value.fromBigInt(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get buyGem(): Bytes {
    let value = this.get("buyGem");
    return value.toBytes();
  }

  set buyGem(value: Bytes) {
    this.set("buyGem", Value.fromBytes(value));
  }

  get payAmt(): BigInt {
    let value = this.get("payAmt");
    return value.toBigInt();
  }

  set payAmt(value: BigInt) {
    this.set("payAmt", Value.fromBigInt(value));
  }

  get buyAmt(): BigInt {
    let value = this.get("buyAmt");
    return value.toBigInt();
  }

  set buyAmt(value: BigInt) {
    this.set("buyAmt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get offerType(): i32 {
    let value = this.get("offerType");
    return value.toI32();
  }

  set offerType(value: i32) {
    this.set("offerType", Value.fromI32(value));
  }
}

export class MinSell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MinSell entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MinSell entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MinSell", id.toString(), this);
  }

  static load(id: string): MinSell | null {
    return store.get("MinSell", id) as MinSell | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get minAmount(): BigInt {
    let value = this.get("minAmount");
    return value.toBigInt();
  }

  set minAmount(value: BigInt) {
    this.set("minAmount", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class OfferType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OfferType entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OfferType entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OfferType", id.toString(), this);
  }

  static load(id: string): OfferType | null {
    return store.get("OfferType", id) as OfferType | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerType(): i32 {
    let value = this.get("offerType");
    return value.toI32();
  }

  set offerType(value: i32) {
    this.set("offerType", Value.fromI32(value));
  }

  get state(): boolean {
    let value = this.get("state");
    return value.toBoolean();
  }

  set state(value: boolean) {
    this.set("state", Value.fromBoolean(value));
  }
}

export class SetAuthority extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetAuthority entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetAuthority entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetAuthority", id.toString(), this);
  }

  static load(id: string): SetAuthority | null {
    return store.get("SetAuthority", id) as SetAuthority | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get authority(): Bytes {
    let value = this.get("authority");
    return value.toBytes();
  }

  set authority(value: Bytes) {
    this.set("authority", Value.fromBytes(value));
  }
}

export class SetOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetOwner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetOwner", id.toString(), this);
  }

  static load(id: string): SetOwner | null {
    return store.get("SetOwner", id) as SetOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class SortedOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SortedOffer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SortedOffer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SortedOffer", id.toString(), this);
  }

  static load(id: string): SortedOffer | null {
    return store.get("SortedOffer", id) as SortedOffer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerID(): BigInt {
    let value = this.get("offerID");
    return value.toBigInt();
  }

  set offerID(value: BigInt) {
    this.set("offerID", Value.fromBigInt(value));
  }
}

export class Take extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Take entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Take entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Take", id.toString(), this);
  }

  static load(id: string): Take | null {
    return store.get("Take", id) as Take | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerID(): BigInt {
    let value = this.get("offerID");
    return value.toBigInt();
  }

  set offerID(value: BigInt) {
    this.set("offerID", Value.fromBigInt(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get buyGem(): Bytes {
    let value = this.get("buyGem");
    return value.toBytes();
  }

  set buyGem(value: Bytes) {
    this.set("buyGem", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get takeAmt(): BigInt {
    let value = this.get("takeAmt");
    return value.toBigInt();
  }

  set takeAmt(value: BigInt) {
    this.set("takeAmt", Value.fromBigInt(value));
  }

  get giveAmt(): BigInt {
    let value = this.get("giveAmt");
    return value.toBigInt();
  }

  set giveAmt(value: BigInt) {
    this.set("giveAmt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get offerType(): i32 {
    let value = this.get("offerType");
    return value.toI32();
  }

  set offerType(value: i32) {
    this.set("offerType", Value.fromI32(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payAmt(): BigInt {
    let value = this.get("payAmt");
    return value.toBigInt();
  }

  set payAmt(value: BigInt) {
    this.set("payAmt", Value.fromBigInt(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get buyAmt(): BigInt {
    let value = this.get("buyAmt");
    return value.toBigInt();
  }

  set buyAmt(value: BigInt) {
    this.set("buyAmt", Value.fromBigInt(value));
  }

  get buyGem(): Bytes {
    let value = this.get("buyGem");
    return value.toBytes();
  }

  set buyGem(value: Bytes) {
    this.set("buyGem", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdraw", id.toString(), this);
  }

  static load(id: string): Withdraw | null {
    return store.get("Withdraw", id) as Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}
