// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogItemUpdate extends ethereum.Event {
  get params(): LogItemUpdate__Params {
    return new LogItemUpdate__Params(this);
  }
}

export class LogItemUpdate__Params {
  _event: LogItemUpdate;

  constructor(event: LogItemUpdate) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogKill extends ethereum.Event {
  get params(): LogKill__Params {
    return new LogKill__Params(this);
  }
}

export class LogKill__Params {
  _event: LogKill;

  constructor(event: LogKill) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payGem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyGem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get payAmt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buyAmt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LogMake extends ethereum.Event {
  get params(): LogMake__Params {
    return new LogMake__Params(this);
  }
}

export class LogMake__Params {
  _event: LogMake;

  constructor(event: LogMake) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payGem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyGem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get payAmt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buyAmt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get offerType(): i32 {
    return this._event.parameters[8].value.toI32();
  }
}

export class LogMinSell extends ethereum.Event {
  get params(): LogMinSell__Params {
    return new LogMinSell__Params(this);
  }
}

export class LogMinSell__Params {
  _event: LogMinSell;

  constructor(event: LogMinSell) {
    this._event = event;
  }

  get payGem(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogOfferType extends ethereum.Event {
  get params(): LogOfferType__Params {
    return new LogOfferType__Params(this);
  }
}

export class LogOfferType__Params {
  _event: LogOfferType;

  constructor(event: LogOfferType) {
    this._event = event;
  }

  get offerType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class LogOrderFilled extends ethereum.Event {
  get params(): LogOrderFilled__Params {
    return new LogOrderFilled__Params(this);
  }
}

export class LogOrderFilled__Params {
  _event: LogOrderFilled;

  constructor(event: LogOrderFilled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogSetAuthority extends ethereum.Event {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetOwner extends ethereum.Event {
  get params(): LogSetOwner__Params {
    return new LogSetOwner__Params(this);
  }
}

export class LogSetOwner__Params {
  _event: LogSetOwner;

  constructor(event: LogSetOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSortedOffer extends ethereum.Event {
  get params(): LogSortedOffer__Params {
    return new LogSortedOffer__Params(this);
  }
}

export class LogSortedOffer__Params {
  _event: LogSortedOffer;

  constructor(event: LogSortedOffer) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogTake extends ethereum.Event {
  get params(): LogTake__Params {
    return new LogTake__Params(this);
  }
}

export class LogTake__Params {
  _event: LogTake;

  constructor(event: LogTake) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payGem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyGem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get takeAmt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get giveAmt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get offerType(): i32 {
    return this._event.parameters[9].value.toI32();
  }
}

export class LogTrade extends ethereum.Event {
  get params(): LogTrade__Params {
    return new LogTrade__Params(this);
  }
}

export class LogTrade__Params {
  _event: LogTrade;

  constructor(event: LogTrade) {
    this._event = event;
  }

  get payAmt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get payGem(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buyGem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogWithdraw extends ethereum.Event {
  get params(): LogWithdraw__Params {
    return new LogWithdraw__Params(this);
  }
}

export class LogWithdraw__Params {
  _event: LogWithdraw;

  constructor(event: LogWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract__depositWithdrawHistoryResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: boolean,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class Contract__getOfferResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class Contract__offersResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract__offersHistoryResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: Address;
  value8: BigInt;
  value9: i32;
  value10: boolean;
  value11: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: Address,
    value8: BigInt,
    value9: i32,
    value10: boolean,
    value11: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    return map;
  }
}

export class Contract__rankResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceInUse(token: Address, user: Address): BigInt {
    let result = super.call(
      "balanceInUse",
      "balanceInUse(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceInUse(token: Address, user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceInUse",
      "balanceInUse(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(token: Address, user: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(token: Address, user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  best(param0: Address, param1: Address): BigInt {
    let result = super.call("best", "best(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_best(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("best", "best(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyAllAmount(
    buyGem: Address,
    buyAmt: BigInt,
    payGem: Address,
    maxFillAmount: BigInt,
    offerType: i32
  ): BigInt {
    let result = super.call(
      "buyAllAmount",
      "buyAllAmount(address,uint256,address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(maxFillAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );

    return result[0].toBigInt();
  }

  try_buyAllAmount(
    buyGem: Address,
    buyAmt: BigInt,
    payGem: Address,
    maxFillAmount: BigInt,
    offerType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyAllAmount",
      "buyAllAmount(address,uint256,address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(maxFillAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancel(id: BigInt): boolean {
    let result = super.call("cancel", "cancel(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_cancel(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancel", "cancel(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositWithdrawHistory(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): Contract__depositWithdrawHistoryResult {
    let result = super.call(
      "depositWithdrawHistory",
      "depositWithdrawHistory(address,address,uint256):(address,uint256,address,uint64,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Contract__depositWithdrawHistoryResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean()
    );
  }

  try_depositWithdrawHistory(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Contract__depositWithdrawHistoryResult> {
    let result = super.tryCall(
      "depositWithdrawHistory",
      "depositWithdrawHistory(address,address,uint256):(address,uint256,address,uint64,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__depositWithdrawHistoryResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean()
      )
    );
  }

  dust(param0: Address): BigInt {
    let result = super.call("dust", "dust(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_dust(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dust", "dust(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dustId(): BigInt {
    let result = super.call("dustId", "dustId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dustId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dustId", "dustId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBestOffer(sellGem: Address, buyGem: Address): BigInt {
    let result = super.call(
      "getBestOffer",
      "getBestOffer(address,address):(uint256)",
      [ethereum.Value.fromAddress(sellGem), ethereum.Value.fromAddress(buyGem)]
    );

    return result[0].toBigInt();
  }

  try_getBestOffer(
    sellGem: Address,
    buyGem: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBestOffer",
      "getBestOffer(address,address):(uint256)",
      [ethereum.Value.fromAddress(sellGem), ethereum.Value.fromAddress(buyGem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetterOffer(id: BigInt): BigInt {
    let result = super.call(
      "getBetterOffer",
      "getBetterOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getBetterOffer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBetterOffer",
      "getBetterOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyAmount(buyGem: Address, payGem: Address, payAmt: BigInt): BigInt {
    let result = super.call(
      "getBuyAmount",
      "getBuyAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(payAmt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyAmount(
    buyGem: Address,
    payGem: Address,
    payAmt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyAmount",
      "getBuyAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(payAmt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIdIndexProcessed(owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "getIdIndexProcessed",
      "getIdIndexProcessed(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getIdIndexProcessed(
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIdIndexProcessed",
      "getIdIndexProcessed(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinSell(payGem: Address): BigInt {
    let result = super.call("getMinSell", "getMinSell(address):(uint256)", [
      ethereum.Value.fromAddress(payGem)
    ]);

    return result[0].toBigInt();
  }

  try_getMinSell(payGem: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMinSell", "getMinSell(address):(uint256)", [
      ethereum.Value.fromAddress(payGem)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(id: BigInt): Contract__getOfferResult {
    let result = super.call(
      "getOffer",
      "getOffer(uint256):(uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new Contract__getOfferResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_getOffer(id: BigInt): ethereum.CallResult<Contract__getOfferResult> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(uint256):(uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getOfferResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  getOfferCount(sellGem: Address, buyGem: Address): BigInt {
    let result = super.call(
      "getOfferCount",
      "getOfferCount(address,address):(uint256)",
      [ethereum.Value.fromAddress(sellGem), ethereum.Value.fromAddress(buyGem)]
    );

    return result[0].toBigInt();
  }

  try_getOfferCount(
    sellGem: Address,
    buyGem: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOfferCount",
      "getOfferCount(address,address):(uint256)",
      [ethereum.Value.fromAddress(sellGem), ethereum.Value.fromAddress(buyGem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(id: BigInt): Address {
    let result = super.call("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_getOwner(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPayAmount(payGem: Address, buyGem: Address, buyAmt: BigInt): BigInt {
    let result = super.call(
      "getPayAmount",
      "getPayAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPayAmount(
    payGem: Address,
    buyGem: Address,
    buyAmt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPayAmount",
      "getPayAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWorseOffer(id: BigInt): BigInt {
    let result = super.call(
      "getWorseOffer",
      "getWorseOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getWorseOffer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWorseOffer",
      "getWorseOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(id: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastOfferId(): BigInt {
    let result = super.call("lastOfferId", "lastOfferId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastOfferId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastOfferId", "lastOfferId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastOffersHistoryIndex(param0: Address): BigInt {
    let result = super.call(
      "lastOffersHistoryIndex",
      "lastOffersHistoryIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastOffersHistoryIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastOffersHistoryIndex",
      "lastOffersHistoryIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offer(
    payAmt: BigInt,
    payGem: Address,
    buyAmt: BigInt,
    buyGem: Address,
    pos: BigInt,
    rounding: boolean,
    offerType: i32
  ): BigInt {
    let result = super.call(
      "offer",
      "offer(uint256,address,uint256,address,uint256,bool,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(payAmt),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(pos),
        ethereum.Value.fromBoolean(rounding),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );

    return result[0].toBigInt();
  }

  try_offer(
    payAmt: BigInt,
    payGem: Address,
    buyAmt: BigInt,
    buyGem: Address,
    pos: BigInt,
    rounding: boolean,
    offerType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offer",
      "offer(uint256,address,uint256,address,uint256,bool,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(payAmt),
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(buyAmt),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(pos),
        ethereum.Value.fromBoolean(rounding),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offerTypes(param0: i32): boolean {
    let result = super.call("offerTypes", "offerTypes(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBoolean();
  }

  try_offerTypes(param0: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("offerTypes", "offerTypes(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offers(param0: BigInt): Contract__offersResult {
    let result = super.call(
      "offers",
      "offers(uint256):(uint256,address,uint256,address,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__offersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt()
    );
  }

  try_offers(param0: BigInt): ethereum.CallResult<Contract__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(uint256):(uint256,address,uint256,address,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__offersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt()
      )
    );
  }

  offersHistory(
    param0: Address,
    param1: BigInt
  ): Contract__offersHistoryResult {
    let result = super.call(
      "offersHistory",
      "offersHistory(address,uint256):(uint256,uint256,uint256,address,uint256,uint256,address,address,uint64,uint8,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__offersHistoryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toBigInt(),
      result[9].toI32(),
      result[10].toBoolean(),
      result[11].toBoolean()
    );
  }

  try_offersHistory(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__offersHistoryResult> {
    let result = super.tryCall(
      "offersHistory",
      "offersHistory(address,uint256):(uint256,uint256,uint256,address,uint256,uint256,address,address,uint64,uint8,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__offersHistoryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toBigInt(),
        value[9].toI32(),
        value[10].toBoolean(),
        value[11].toBoolean()
      )
    );
  }

  offersHistoryIndices(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "offersHistoryIndices",
      "offersHistoryIndices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_offersHistoryIndices(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offersHistoryIndices",
      "offersHistoryIndices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rank(param0: BigInt): Contract__rankResult {
    let result = super.call("rank", "rank(uint256):(uint256,uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new Contract__rankResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_rank(param0: BigInt): ethereum.CallResult<Contract__rankResult> {
    let result = super.tryCall(
      "rank",
      "rank(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__rankResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  sellAllAmount(
    payGem: Address,
    payAmt: BigInt,
    buyGem: Address,
    minFillAmount: BigInt,
    offerType: i32
  ): BigInt {
    let result = super.call(
      "sellAllAmount",
      "sellAllAmount(address,uint256,address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(payAmt),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(minFillAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );

    return result[0].toBigInt();
  }

  try_sellAllAmount(
    payGem: Address,
    payAmt: BigInt,
    buyGem: Address,
    minFillAmount: BigInt,
    offerType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellAllAmount",
      "sellAllAmount(address,uint256,address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(payAmt),
        ethereum.Value.fromAddress(buyGem),
        ethereum.Value.fromUnsignedBigInt(minFillAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offerType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setMinSell(payGem: Address, dustAmt: BigInt): boolean {
    let result = super.call(
      "setMinSell",
      "setMinSell(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(dustAmt)
      ]
    );

    return result[0].toBoolean();
  }

  try_setMinSell(
    payGem: Address,
    dustAmt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMinSell",
      "setMinSell(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(payGem),
        ethereum.Value.fromUnsignedBigInt(dustAmt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  span(param0: Address, param1: Address): BigInt {
    let result = super.call("span", "span(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_span(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("span", "span(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: Address, param1: Address): BigInt {
    let result = super.call("tokens", "tokens(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_tokens(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokens", "tokens(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensInUse(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "tokensInUse",
      "tokensInUse(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_tokensInUse(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensInUse",
      "tokensInUse(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyAllAmountCall extends ethereum.Call {
  get inputs(): BuyAllAmountCall__Inputs {
    return new BuyAllAmountCall__Inputs(this);
  }

  get outputs(): BuyAllAmountCall__Outputs {
    return new BuyAllAmountCall__Outputs(this);
  }
}

export class BuyAllAmountCall__Inputs {
  _call: BuyAllAmountCall;

  constructor(call: BuyAllAmountCall) {
    this._call = call;
  }

  get buyGem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buyAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get payGem(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxFillAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get offerType(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class BuyAllAmountCall__Outputs {
  _call: BuyAllAmountCall;

  constructor(call: BuyAllAmountCall) {
    this._call = call;
  }

  get fillAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class OfferCall extends ethereum.Call {
  get inputs(): OfferCall__Inputs {
    return new OfferCall__Inputs(this);
  }

  get outputs(): OfferCall__Outputs {
    return new OfferCall__Outputs(this);
  }
}

export class OfferCall__Inputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }

  get payAmt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payGem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buyAmt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buyGem(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get pos(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get rounding(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get offerType(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class OfferCall__Outputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellAllAmountCall extends ethereum.Call {
  get inputs(): SellAllAmountCall__Inputs {
    return new SellAllAmountCall__Inputs(this);
  }

  get outputs(): SellAllAmountCall__Outputs {
    return new SellAllAmountCall__Outputs(this);
  }
}

export class SellAllAmountCall__Inputs {
  _call: SellAllAmountCall;

  constructor(call: SellAllAmountCall) {
    this._call = call;
  }

  get payGem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyGem(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minFillAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get offerType(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class SellAllAmountCall__Outputs {
  _call: SellAllAmountCall;

  constructor(call: SellAllAmountCall) {
    this._call = call;
  }

  get fillAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get authority_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetMinSellCall extends ethereum.Call {
  get inputs(): SetMinSellCall__Inputs {
    return new SetMinSellCall__Inputs(this);
  }

  get outputs(): SetMinSellCall__Outputs {
    return new SetMinSellCall__Outputs(this);
  }
}

export class SetMinSellCall__Inputs {
  _call: SetMinSellCall;

  constructor(call: SetMinSellCall) {
    this._call = call;
  }

  get payGem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dustAmt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinSellCall__Outputs {
  _call: SetMinSellCall;

  constructor(call: SetMinSellCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetOfferTypeCall extends ethereum.Call {
  get inputs(): SetOfferTypeCall__Inputs {
    return new SetOfferTypeCall__Inputs(this);
  }

  get outputs(): SetOfferTypeCall__Outputs {
    return new SetOfferTypeCall__Outputs(this);
  }
}

export class SetOfferTypeCall__Inputs {
  _call: SetOfferTypeCall;

  constructor(call: SetOfferTypeCall) {
    this._call = call;
  }

  get offerType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOfferTypeCall__Outputs {
  _call: SetOfferTypeCall;

  constructor(call: SetOfferTypeCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
